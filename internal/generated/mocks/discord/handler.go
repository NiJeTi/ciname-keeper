// Code generated by mockery. DO NOT EDIT.

package discord

import (
	discordgo "github.com/bwmarrin/discordgo"
	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: i
func (_m *MockHandler) Handle(i *discordgo.InteractionCreate) {
	_m.Called(i)
}

// MockHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - i *discordgo.InteractionCreate
func (_e *MockHandler_Expecter) Handle(i interface{}) *MockHandler_Handle_Call {
	return &MockHandler_Handle_Call{Call: _e.mock.On("Handle", i)}
}

func (_c *MockHandler_Handle_Call) Run(run func(i *discordgo.InteractionCreate)) *MockHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*discordgo.InteractionCreate))
	})
	return _c
}

func (_c *MockHandler_Handle_Call) Return() *MockHandler_Handle_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Handle_Call) RunAndReturn(run func(*discordgo.InteractionCreate)) *MockHandler_Handle_Call {
	_c.Run(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
