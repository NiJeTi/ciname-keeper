// Code generated by mockery. DO NOT EDIT.

package discord_test

import (
	context "context"

	discordgo "github.com/bwmarrin/discordgo"

	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, i
func (_m *MockHandler) Handle(ctx context.Context, i *discordgo.Interaction) error {
	ret := _m.Called(ctx, i)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *discordgo.Interaction) error); ok {
		r0 = rf(ctx, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - i *discordgo.Interaction
func (_e *MockHandler_Expecter) Handle(ctx interface{}, i interface{}) *MockHandler_Handle_Call {
	return &MockHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, i)}
}

func (_c *MockHandler_Handle_Call) Run(run func(ctx context.Context, i *discordgo.Interaction)) *MockHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*discordgo.Interaction))
	})
	return _c
}

func (_c *MockHandler_Handle_Call) Return(_a0 error) *MockHandler_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Handle_Call) RunAndReturn(run func(context.Context, *discordgo.Interaction) error) *MockHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
