// Code generated by mockery. DO NOT EDIT.

package addMovie_test

import (
	context "context"

	models "github.com/nijeti/cinema-keeper/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockOmdb is an autogenerated mock type for the omdb type
type MockOmdb struct {
	mock.Mock
}

type MockOmdb_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOmdb) EXPECT() *MockOmdb_Expecter {
	return &MockOmdb_Expecter{mock: &_m.Mock}
}

// MovieByID provides a mock function with given fields: ctx, id
func (_m *MockOmdb) MovieByID(ctx context.Context, id models.ImdbID) (*models.MovieMeta, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MovieByID")
	}

	var r0 *models.MovieMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ImdbID) (*models.MovieMeta, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ImdbID) *models.MovieMeta); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MovieMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ImdbID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOmdb_MovieByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MovieByID'
type MockOmdb_MovieByID_Call struct {
	*mock.Call
}

// MovieByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id models.ImdbID
func (_e *MockOmdb_Expecter) MovieByID(ctx interface{}, id interface{}) *MockOmdb_MovieByID_Call {
	return &MockOmdb_MovieByID_Call{Call: _e.mock.On("MovieByID", ctx, id)}
}

func (_c *MockOmdb_MovieByID_Call) Run(run func(ctx context.Context, id models.ImdbID)) *MockOmdb_MovieByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ImdbID))
	})
	return _c
}

func (_c *MockOmdb_MovieByID_Call) Return(_a0 *models.MovieMeta, _a1 error) *MockOmdb_MovieByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOmdb_MovieByID_Call) RunAndReturn(run func(context.Context, models.ImdbID) (*models.MovieMeta, error)) *MockOmdb_MovieByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOmdb creates a new instance of MockOmdb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOmdb(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOmdb {
	mock := &MockOmdb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
