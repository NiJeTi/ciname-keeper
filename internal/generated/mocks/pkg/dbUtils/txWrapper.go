// Code generated by mockery. DO NOT EDIT.

package dbutils_test

import (
	context "context"

	dbutils "github.com/nijeti/cinema-keeper/internal/pkg/dbutils"
	mock "github.com/stretchr/testify/mock"
)

// MockTxWrapper is an autogenerated mock type for the TxWrapper type
type MockTxWrapper struct {
	mock.Mock
}

type MockTxWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTxWrapper) EXPECT() *MockTxWrapper_Expecter {
	return &MockTxWrapper_Expecter{mock: &_m.Mock}
}

// Wrap provides a mock function with given fields: ctx, operation
func (_m *MockTxWrapper) Wrap(ctx context.Context, operation dbutils.Operation) error {
	ret := _m.Called(ctx, operation)

	if len(ret) == 0 {
		panic("no return value specified for Wrap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbutils.Operation) error); ok {
		r0 = rf(ctx, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTxWrapper_Wrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wrap'
type MockTxWrapper_Wrap_Call struct {
	*mock.Call
}

// Wrap is a helper method to define mock.On call
//   - ctx context.Context
//   - operation dbutils.Operation
func (_e *MockTxWrapper_Expecter) Wrap(ctx interface{}, operation interface{}) *MockTxWrapper_Wrap_Call {
	return &MockTxWrapper_Wrap_Call{Call: _e.mock.On("Wrap", ctx, operation)}
}

func (_c *MockTxWrapper_Wrap_Call) Run(run func(ctx context.Context, operation dbutils.Operation)) *MockTxWrapper_Wrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dbutils.Operation))
	})
	return _c
}

func (_c *MockTxWrapper_Wrap_Call) Return(_a0 error) *MockTxWrapper_Wrap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTxWrapper_Wrap_Call) RunAndReturn(run func(context.Context, dbutils.Operation) error) *MockTxWrapper_Wrap_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTxWrapper creates a new instance of MockTxWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTxWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTxWrapper {
	mock := &MockTxWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
