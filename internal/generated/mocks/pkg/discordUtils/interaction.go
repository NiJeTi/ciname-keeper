// Code generated by mockery. DO NOT EDIT.

package discordUtils_test

import (
	discordgo "github.com/bwmarrin/discordgo"
	mock "github.com/stretchr/testify/mock"
)

// MockInteraction is an autogenerated mock type for the interaction type
type MockInteraction struct {
	mock.Mock
}

type MockInteraction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInteraction) EXPECT() *MockInteraction_Expecter {
	return &MockInteraction_Expecter{mock: &_m.Mock}
}

// ApplicationCommandData provides a mock function with no fields
func (_m *MockInteraction) ApplicationCommandData() discordgo.ApplicationCommandInteractionData {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ApplicationCommandData")
	}

	var r0 discordgo.ApplicationCommandInteractionData
	if rf, ok := ret.Get(0).(func() discordgo.ApplicationCommandInteractionData); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(discordgo.ApplicationCommandInteractionData)
	}

	return r0
}

// MockInteraction_ApplicationCommandData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplicationCommandData'
type MockInteraction_ApplicationCommandData_Call struct {
	*mock.Call
}

// ApplicationCommandData is a helper method to define mock.On call
func (_e *MockInteraction_Expecter) ApplicationCommandData() *MockInteraction_ApplicationCommandData_Call {
	return &MockInteraction_ApplicationCommandData_Call{Call: _e.mock.On("ApplicationCommandData")}
}

func (_c *MockInteraction_ApplicationCommandData_Call) Run(run func()) *MockInteraction_ApplicationCommandData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInteraction_ApplicationCommandData_Call) Return(_a0 discordgo.ApplicationCommandInteractionData) *MockInteraction_ApplicationCommandData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInteraction_ApplicationCommandData_Call) RunAndReturn(run func() discordgo.ApplicationCommandInteractionData) *MockInteraction_ApplicationCommandData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInteraction creates a new instance of MockInteraction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInteraction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInteraction {
	mock := &MockInteraction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
